ZVSE2
** Random Battle Positions
** Idea by Treupp, originally script by Timothy Pulver
** Rewritten by Archer30 on Apr 2022

** All starting positions of creatures on the battlefield (but not war machines)
** are set randomly for all battles except siege battles.


!?FU(WOG_OnAfterPlacingObstacles);
!!UN:P305/?(wogOption:y);
!!FU&(wogOption)<>(TRUE):E;             [Exit if script isn't enabled]

; Exit if it is a siege battle
!!BA:S?(isSiege:y);
!!FU&(isSiege)>0:E;

; Set the stack to be moved. Hero with higher level of tactics can prevent his/her troops from moving
!!VR(firstStack:y):S(BATTLE_STACK_FIRST);
!!VR(lastStack:y):S(BATTLE_STACK_LAST);

!!VR(atkTactics:y):S(SKILL_NOT_LEARNED);
!!VR(defTactics:y):S(SKILL_NOT_LEARNED);

!!HEi^battle_hero_0^&i^battle_hero_0^>(NO_HERO):S(SKILL_TACTICS)/?(atkTactics);
!!HEi^battle_hero_1^&i^battle_hero_1^>(NO_HERO):S(SKILL_TACTICS)/?(defTactics);

!!if&(atkTactics)>(defTactics);
  !!VR(firstStack):S(BATTLE_DEFENDER_STACK_FIRST);
!!el&(atkTactics)<(defTactics);
  !!VR(lastStack):S(BATTLE_ATTACKER_STACK_LAST);
!!en;

; Loop through all the monsters and move available ones to a ranndom position
!!re i/(firstStack)/(lastStack);
  !!BMi:T?(type:y) N?(num:y);

  !!if&(type)>(NO_MON)/(type)<>(MON_CATAPULT)/(type)<>(MON_BALLISTA)/(type)<>(MON_FIRST_AID_TENT)/(type)<>(MON_AMMO_CART)/(type)<>(MON_ARROW_TOWERS)/(num)>0;
    !!BMi:F?(flag:y) I?(side:y);
    !!VR(isWide:y):&(MON_FLAG_WIDE);

    ; Look for a random position for the stack - the last 5 columns of each side will not be considered to be valid spots for another side
    !!FU(WOG_315_GetRandomPosition):P(side)/(isWide)/?(randPos:y)/10; [10 - max column allowed from the edge of each side]
    !!BMi&(randPos)>-1:P(randPos);
  !!en;
!!en;

!?FU(WOG_315_GetRandomPosition);
!#VA(side:x) (isWide:x) (randPos:x) (maxColumn:x);

!!VR(randPos):S-1;

; Set max column to 17 (all the columns are allowed) if the parametre wasn't defined
!!FU:A?(numArgs:y);
!!VR(maxColumn)&(numArgs)<4:S17;

; Create an array for valid positions
!!FU(NewIntArray):P?(validPosArray:y);

; Loop through all the positions and fill in the array for available ones
!!re (pos:y)/1/185;
  !!VR(isAvailPos:y):S(TRUE);
    !!FU(WOG_315_CheckIfHexIsFree):P(side)/(pos)/(maxColumn)/?(isAvailPos);
  
  !!if&(isWide)/(isAvailPos);
    !!VR(secPos:y)&(side)=(BATTLE_LEFT):S(pos) +1;
    !!VR(secPos)&(side)=(BATTLE_RIGHT):S(pos) -1;
    !!FU(WOG_315_CheckIfHexIsFree):P(side)/(secPos)/(maxColumn)/?(isAvailPos);
  !!en;
  
  !!FU(Array_Push)&(isAvailPos):P(validPosArray)/(pos);
!!en;

; Get a random valid position from the array
!!SN:M(validPosArray)/?(arraySize:y);

!!if&(arraySize)>=1;
  !!VR(lastIndex:y):S(arraySize)-1;
  !!VR(randPosPtr:y):R0/0/(lastIndex);
  !!SN:M(validPosArray)/(randPosPtr)/?(randPos);
!!en;

!?FU(WOG_315_CheckIfHexIsFree);
!#VA(side:x) (pos:x) (maxColumn:x) (isAvailPos:x);

!!VR(isAvailPos):S(TRUE);

!!VR(realColumn:y):S(pos) %17;

; Get the column number to each side
!!if&(side)=(BATTLE_LEFT);
  !!VR(column:y):S(realColumn);
!!el;
  !!VR(column):S16 -(realColumn);
!!en;

; Store the position if it is not overlapped with a statck, on obstacles or reaches the max column limit
!!if&(column)>0/(column)<=(maxColumn);
  !!BU:E(pos)/?(stack:y) O(pos)/?(obstacleFlag:y);
  !!VR(isAvailPos)|(stack)>(NO_STACK)/(obstacleFlag)>0:S(FALSE);
!!el;
  !!VR(isAvailPos):S(FALSE);
!!en;
